package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x50)
public class Play_Client_Title extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x50;
    @MCType("VarInt")
    private int action;
    @MCType("Chat")
    private String titleText;
    @MCType("Chat")
    private String subtitleText;
    /** Displays a message above the hotbar (the same as position 2 in Chat Message (clientbound), except that it correctly renders formatted chat. See MC-119145 for more information.) */
    @MCType("Chat")
    private String actionBarText;
    @MCType("Play_Client_Title_SetTimesAndDisplay")
    private Play_Client_Title_SetTimesAndDisplay setTimesAndDisplay;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        packet.write(ByteUtils.encodeVarInt(action));
        packet.write(ByteUtils.encodeChat(titleText));
        packet.write(ByteUtils.encodeChat(subtitleText));
        // Displays a message above the hotbar (the same as position 2 in Chat Message (clientbound), except that it correctly renders formatted chat. See MC-119145 for more information.)
        packet.write(ByteUtils.encodeChat(actionBarText));
        packet.write(setTimesAndDisplay.encode());
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        action = StreamUtils.readVarInt(in);
        titleText = StreamUtils.readChat(in);
        subtitleText = StreamUtils.readChat(in);
        // Displays a message above the hotbar (the same as position 2 in Chat Message (clientbound), except that it correctly renders formatted chat. See MC-119145 for more information.)
        actionBarText = StreamUtils.readChat(in);
        setTimesAndDisplay = new Play_Client_Title_SetTimesAndDisplay();
        setTimesAndDisplay.decode(in);
    }
    @Data
    public static class Play_Client_Title_SetTimesAndDisplay extends Packet {
        /** Ticks to spend fading in */
        @MCType("Int")
        private int fadeIn;
        /** Ticks to keep the title displayed */
        @MCType("Int")
        private int stay;
        /** Ticks to spend out, not when to start fading out */
        @MCType("Int")
        private int fadeOut;

        @Override
        public byte[] encode() throws Exception {
            ByteArrayDataOutput packet = ByteStreams.newDataOutput();
            // Ticks to spend fading in
            packet.write(ByteUtils.encodeInt(fadeIn));
            // Ticks to keep the title displayed
            packet.write(ByteUtils.encodeInt(stay));
            // Ticks to spend out, not when to start fading out
            packet.write(ByteUtils.encodeInt(fadeOut));
            return packet.toByteArray();
        }
        @Override
        public void decode(ByteArrayDataInput in) throws Exception {
            // Ticks to spend fading in
            fadeIn = StreamUtils.readInt(in);
            // Ticks to keep the title displayed
            stay = StreamUtils.readInt(in);
            // Ticks to spend out, not when to start fading out
            fadeOut = StreamUtils.readInt(in);
        }
    }
    @FunctionalInterface
    public interface Play_Client_Title_SetTimesAndDisplay_Provider {
        Play_Client_Title_SetTimesAndDisplay provide();
    }
    public static Play_Client_Title_SetTimesAndDisplay_Builder setTimesAndDisplayBuilder() {
        return new Play_Client_Title_SetTimesAndDisplay_Builder();
    }
    public static class Play_Client_Title_SetTimesAndDisplay_Builder {
        private Play_Client_Title_SetTimesAndDisplay object = new Play_Client_Title_SetTimesAndDisplay();
        /** Ticks to spend fading in */
        public Play_Client_Title_SetTimesAndDisplay_Builder fadeIn(int fadeIn) {
            object.fadeIn = fadeIn;
            return this;
        }
        /** Ticks to keep the title displayed */
        public Play_Client_Title_SetTimesAndDisplay_Builder stay(int stay) {
            object.stay = stay;
            return this;
        }
        /** Ticks to spend out, not when to start fading out */
        public Play_Client_Title_SetTimesAndDisplay_Builder fadeOut(int fadeOut) {
            object.fadeOut = fadeOut;
            return this;
        }
        public Play_Client_Title_SetTimesAndDisplay build() {
             return object;
        }

    }
    public static class Play_Client_Title_Builder {
        private Play_Client_Title object = new Play_Client_Title();
        /** Packet ID */
        public Play_Client_Title_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        public Play_Client_Title_Builder action(int action) {
            object.action = action;
            return this;
        }
        public Play_Client_Title_Builder titleText(String titleText) {
            object.titleText = titleText;
            return this;
        }
        public Play_Client_Title_Builder subtitleText(String subtitleText) {
            object.subtitleText = subtitleText;
            return this;
        }
        /** Displays a message above the hotbar (the same as position 2 in Chat Message (clientbound), except that it correctly renders formatted chat. See MC-119145 for more information.) */
        public Play_Client_Title_Builder actionBarText(String actionBarText) {
            object.actionBarText = actionBarText;
            return this;
        }
        public Play_Client_Title_Builder setTimesAndDisplay(Play_Client_Title_SetTimesAndDisplay_Provider provider) {
            object.setTimesAndDisplay = provider.provide();
            return this;
        }
        public Play_Client_Title build() {
             return object;
        }

    }
    public static Play_Client_Title_Builder builder() {
        return new Play_Client_Title_Builder();
    }
}