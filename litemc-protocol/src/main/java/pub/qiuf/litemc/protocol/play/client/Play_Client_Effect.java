package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x23)
public class Play_Client_Effect extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x23;
    /** The ID of the effect, see below */
    @MCType("Int")
    private int effectId;
    /** The location of the effect */
    @MCType("Position")
    private byte[] location = new byte[8];
    /** Extra data for certain effects, see below */
    @MCType("Int")
    private int data;
    /** See above */
    @MCType("Boolean")
    private boolean disableRelativeVolume;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // The ID of the effect, see below
        packet.write(ByteUtils.encodeInt(effectId));
        // The location of the effect
        packet.write(location);
        // Extra data for certain effects, see below
        packet.write(ByteUtils.encodeInt(data));
        // See above
        packet.write(ByteUtils.encodeBoolean(disableRelativeVolume));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // The ID of the effect, see below
        effectId = StreamUtils.readInt(in);
        // The location of the effect
        // TODO decode location
        // Extra data for certain effects, see below
        data = StreamUtils.readInt(in);
        // See above
        disableRelativeVolume = StreamUtils.readBoolean(in);
    }
    public static class Play_Client_Effect_Builder {
        private Play_Client_Effect object = new Play_Client_Effect();
        /** Packet ID */
        public Play_Client_Effect_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** The ID of the effect, see below */
        public Play_Client_Effect_Builder effectId(int effectId) {
            object.effectId = effectId;
            return this;
        }
        /** The location of the effect */
        public Play_Client_Effect_Builder location(byte[] location) {
            object.location = location;
            return this;
        }
        /** Extra data for certain effects, see below */
        public Play_Client_Effect_Builder data(int data) {
            object.data = data;
            return this;
        }
        /** See above */
        public Play_Client_Effect_Builder disableRelativeVolume(boolean disableRelativeVolume) {
            object.disableRelativeVolume = disableRelativeVolume;
            return this;
        }
        public Play_Client_Effect build() {
             return object;
        }

    }
    public static Play_Client_Effect_Builder builder() {
        return new Play_Client_Effect_Builder();
    }
}