package pub.qiuf.litemc.protocol.play.server;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
public class Play_Server_VehicleMove extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x15;
    /** Absolute position (X coordinate) */
    @MCType("Double")
    private double x;
    /** Absolute position (Y coordinate) */
    @MCType("Double")
    private double y;
    /** Absolute position (Z coordinate) */
    @MCType("Double")
    private double z;
    /** Absolute rotation on the vertical axis, in degrees */
    @MCType("Float")
    private float yaw;
    /** Absolute rotation on the horizontal axis, in degrees */
    @MCType("Float")
    private float pitch;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Absolute position (X coordinate)
        packet.write(ByteUtils.encodeDouble(x));
        // Absolute position (Y coordinate)
        packet.write(ByteUtils.encodeDouble(y));
        // Absolute position (Z coordinate)
        packet.write(ByteUtils.encodeDouble(z));
        // Absolute rotation on the vertical axis, in degrees
        packet.write(ByteUtils.encodeFloat(yaw));
        // Absolute rotation on the horizontal axis, in degrees
        packet.write(ByteUtils.encodeFloat(pitch));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Absolute position (X coordinate)
        x = StreamUtils.readDouble(in);
        // Absolute position (Y coordinate)
        y = StreamUtils.readDouble(in);
        // Absolute position (Z coordinate)
        z = StreamUtils.readDouble(in);
        // Absolute rotation on the vertical axis, in degrees
        yaw = StreamUtils.readFloat(in);
        // Absolute rotation on the horizontal axis, in degrees
        pitch = StreamUtils.readFloat(in);
    }
    public static class Play_Server_VehicleMove_Builder {
        private Play_Server_VehicleMove object = new Play_Server_VehicleMove();
        /** Packet ID */
        public Play_Server_VehicleMove_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Absolute position (X coordinate) */
        public Play_Server_VehicleMove_Builder x(double x) {
            object.x = x;
            return this;
        }
        /** Absolute position (Y coordinate) */
        public Play_Server_VehicleMove_Builder y(double y) {
            object.y = y;
            return this;
        }
        /** Absolute position (Z coordinate) */
        public Play_Server_VehicleMove_Builder z(double z) {
            object.z = z;
            return this;
        }
        /** Absolute rotation on the vertical axis, in degrees */
        public Play_Server_VehicleMove_Builder yaw(float yaw) {
            object.yaw = yaw;
            return this;
        }
        /** Absolute rotation on the horizontal axis, in degrees */
        public Play_Server_VehicleMove_Builder pitch(float pitch) {
            object.pitch = pitch;
            return this;
        }
        public Play_Server_VehicleMove build() {
             return object;
        }

    }
    public static Play_Server_VehicleMove_Builder builder() {
        return new Play_Server_VehicleMove_Builder();
    }
}