package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import pub.qiuf.litemc.common.bean.datatype.Varies;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x5B)
public class Play_Client_DeclareRecipes extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x5B;
    /** Number of elements in the following array */
    @MCType("VarInt")
    private int numRecipes;
    @MCType("Play_Client_DeclareRecipes_Recipe")
    private Play_Client_DeclareRecipes_Recipe[] recipe;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Number of elements in the following array
        packet.write(ByteUtils.encodeVarInt(numRecipes));
        for (Play_Client_DeclareRecipes_Recipe temp : recipe) {
            packet.write(temp.encode());
        }
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Number of elements in the following array
        numRecipes = StreamUtils.readVarInt(in);
        recipe = new Play_Client_DeclareRecipes_Recipe[numRecipes];
        for (int i = 0; i < recipe.length; i++) {
            recipe[i] = new Play_Client_DeclareRecipes_Recipe();
            recipe[i].decode(in);
        }
    }
    @Data
    public static class Play_Client_DeclareRecipes_Recipe extends Packet {
        /** The recipe type, see below */
        @MCType("Identifier")
        private String type;
        @MCType("String")
        private String recipeId;
        /** Additional data for the recipe. For some types, there will be no data. */
        @MCType("Varies")
        private Varies data;

        @Override
        public byte[] encode() throws Exception {
            ByteArrayDataOutput packet = ByteStreams.newDataOutput();
            // The recipe type, see below
            packet.write(ByteUtils.encodeIdentifier(type));
            packet.write(ByteUtils.encodeString(recipeId));
            // Additional data for the recipe. For some types, there will be no data.
            packet.write(ByteUtils.encodeVaries(data));
            return packet.toByteArray();
        }
        @Override
        public void decode(ByteArrayDataInput in) throws Exception {
            // The recipe type, see below
            type = StreamUtils.readIdentifier(in);
            recipeId = StreamUtils.readString(in);
            // Additional data for the recipe. For some types, there will be no data.
            data = StreamUtils.readVaries(in);
        }
    }
    @FunctionalInterface
    public interface Play_Client_DeclareRecipes_Recipe_Provider {
        Play_Client_DeclareRecipes_Recipe[] provide();
    }
    public static Play_Client_DeclareRecipes_Recipe_Builder recipeBuilder() {
        return new Play_Client_DeclareRecipes_Recipe_Builder();
    }
    public static class Play_Client_DeclareRecipes_Recipe_Builder {
        private Play_Client_DeclareRecipes_Recipe object = new Play_Client_DeclareRecipes_Recipe();
        /** The recipe type, see below */
        public Play_Client_DeclareRecipes_Recipe_Builder type(String type) {
            object.type = type;
            return this;
        }
        public Play_Client_DeclareRecipes_Recipe_Builder recipeId(String recipeId) {
            object.recipeId = recipeId;
            return this;
        }
        /** Additional data for the recipe. For some types, there will be no data. */
        public Play_Client_DeclareRecipes_Recipe_Builder data(Varies data) {
            object.data = data;
            return this;
        }
        public Play_Client_DeclareRecipes_Recipe build() {
             return object;
        }

    }
    public static class Play_Client_DeclareRecipes_Builder {
        private Play_Client_DeclareRecipes object = new Play_Client_DeclareRecipes();
        /** Packet ID */
        public Play_Client_DeclareRecipes_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Number of elements in the following array */
        public Play_Client_DeclareRecipes_Builder numRecipes(int numRecipes) {
            object.numRecipes = numRecipes;
            return this;
        }
        public Play_Client_DeclareRecipes_Builder recipe(Play_Client_DeclareRecipes_Recipe_Provider provider) {
            object.recipe = provider.provide();
            return this;
        }
        public Play_Client_DeclareRecipes build() {
             return object;
        }

    }
    public static Play_Client_DeclareRecipes_Builder builder() {
        return new Play_Client_DeclareRecipes_Builder();
    }
}