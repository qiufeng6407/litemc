package pub.qiuf.litemc.protocol.play.server;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.bean.datatype.Slot;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
public class Play_Server_ClickWindow extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x09;
    /** The ID of the window which was clicked. 0 for player inventory. */
    @MCType("UnsignedByte")
    private int windowId;
    /** The clicked slot number, see below */
    @MCType("Short")
    private short slot;
    /** The button used in the click, see below */
    @MCType("Byte")
    private byte button;
    /** A unique number for the action, implemented by Notchian as a counter, starting at 1 (different counter for every window ID). Used by the server to send back a Confirm Transaction (clientbound). */
    @MCType("Short")
    private short actionNumber;
    /** Inventory operation mode, see below */
    @MCType("VarInt")
    private int mode;
    /** The clicked slot. Has to be empty (item ID = -1) for drop mode. */
    @MCType("Slot")
    private Slot clickedItem;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // The ID of the window which was clicked. 0 for player inventory.
        packet.write(ByteUtils.encodeUnsignedByte(windowId));
        // The clicked slot number, see below
        packet.write(ByteUtils.encodeShort(slot));
        // The button used in the click, see below
        packet.write(ByteUtils.encodeByte(button));
        // A unique number for the action, implemented by Notchian as a counter, starting at 1 (different counter for every window ID). Used by the server to send back a Confirm Transaction (clientbound).
        packet.write(ByteUtils.encodeShort(actionNumber));
        // Inventory operation mode, see below
        packet.write(ByteUtils.encodeVarInt(mode));
        // The clicked slot. Has to be empty (item ID = -1) for drop mode.
        packet.write(ByteUtils.encodeSlot(clickedItem));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // The ID of the window which was clicked. 0 for player inventory.
        windowId = StreamUtils.readUnsignedByte(in);
        // The clicked slot number, see below
        slot = StreamUtils.readShort(in);
        // The button used in the click, see below
        button = StreamUtils.readByte(in);
        // A unique number for the action, implemented by Notchian as a counter, starting at 1 (different counter for every window ID). Used by the server to send back a Confirm Transaction (clientbound).
        actionNumber = StreamUtils.readShort(in);
        // Inventory operation mode, see below
        mode = StreamUtils.readVarInt(in);
        // The clicked slot. Has to be empty (item ID = -1) for drop mode.
        clickedItem = StreamUtils.readSlot(in);
    }
    public static class Play_Server_ClickWindow_Builder {
        private Play_Server_ClickWindow object = new Play_Server_ClickWindow();
        /** Packet ID */
        public Play_Server_ClickWindow_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** The ID of the window which was clicked. 0 for player inventory. */
        public Play_Server_ClickWindow_Builder windowId(int windowId) {
            object.windowId = windowId;
            return this;
        }
        /** The clicked slot number, see below */
        public Play_Server_ClickWindow_Builder slot(short slot) {
            object.slot = slot;
            return this;
        }
        /** The button used in the click, see below */
        public Play_Server_ClickWindow_Builder button(byte button) {
            object.button = button;
            return this;
        }
        /** A unique number for the action, implemented by Notchian as a counter, starting at 1 (different counter for every window ID). Used by the server to send back a Confirm Transaction (clientbound). */
        public Play_Server_ClickWindow_Builder actionNumber(short actionNumber) {
            object.actionNumber = actionNumber;
            return this;
        }
        /** Inventory operation mode, see below */
        public Play_Server_ClickWindow_Builder mode(int mode) {
            object.mode = mode;
            return this;
        }
        /** The clicked slot. Has to be empty (item ID = -1) for drop mode. */
        public Play_Server_ClickWindow_Builder clickedItem(Slot clickedItem) {
            object.clickedItem = clickedItem;
            return this;
        }
        public Play_Server_ClickWindow build() {
             return object;
        }

    }
    public static Play_Server_ClickWindow_Builder builder() {
        return new Play_Server_ClickWindow_Builder();
    }
}