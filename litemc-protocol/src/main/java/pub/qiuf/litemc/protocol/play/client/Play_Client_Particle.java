package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import pub.qiuf.litemc.common.bean.datatype.Varies;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x24)
public class Play_Client_Particle extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x24;
    /** The particle ID listed in the particle data type. */
    @MCType("Int")
    private int particleId;
    /** If true, particle distance increases from 256 to 65536 */
    @MCType("Boolean")
    private boolean longDistance;
    /** X position of the particle */
    @MCType("Double")
    private double x;
    /** Y position of the particle */
    @MCType("Double")
    private double y;
    /** Z position of the particle */
    @MCType("Double")
    private double z;
    /** This is added to the X position after being multiplied by random.nextGaussian() */
    @MCType("Float")
    private float offsetX;
    /** This is added to the Y position after being multiplied by random.nextGaussian() */
    @MCType("Float")
    private float offsetY;
    /** This is added to the Z position after being multiplied by random.nextGaussian() */
    @MCType("Float")
    private float offsetZ;
    /** The data of each particle */
    @MCType("Float")
    private float particleData;
    /** The number of particles to create */
    @MCType("Int")
    private int particleCount;
    /** The variable data listed in the particle data type. */
    @MCType("Varies")
    private Varies data;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // The particle ID listed in the particle data type.
        packet.write(ByteUtils.encodeInt(particleId));
        // If true, particle distance increases from 256 to 65536
        packet.write(ByteUtils.encodeBoolean(longDistance));
        // X position of the particle
        packet.write(ByteUtils.encodeDouble(x));
        // Y position of the particle
        packet.write(ByteUtils.encodeDouble(y));
        // Z position of the particle
        packet.write(ByteUtils.encodeDouble(z));
        // This is added to the X position after being multiplied by random.nextGaussian()
        packet.write(ByteUtils.encodeFloat(offsetX));
        // This is added to the Y position after being multiplied by random.nextGaussian()
        packet.write(ByteUtils.encodeFloat(offsetY));
        // This is added to the Z position after being multiplied by random.nextGaussian()
        packet.write(ByteUtils.encodeFloat(offsetZ));
        // The data of each particle
        packet.write(ByteUtils.encodeFloat(particleData));
        // The number of particles to create
        packet.write(ByteUtils.encodeInt(particleCount));
        // The variable data listed in the particle data type.
        packet.write(ByteUtils.encodeVaries(data));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // The particle ID listed in the particle data type.
        particleId = StreamUtils.readInt(in);
        // If true, particle distance increases from 256 to 65536
        longDistance = StreamUtils.readBoolean(in);
        // X position of the particle
        x = StreamUtils.readDouble(in);
        // Y position of the particle
        y = StreamUtils.readDouble(in);
        // Z position of the particle
        z = StreamUtils.readDouble(in);
        // This is added to the X position after being multiplied by random.nextGaussian()
        offsetX = StreamUtils.readFloat(in);
        // This is added to the Y position after being multiplied by random.nextGaussian()
        offsetY = StreamUtils.readFloat(in);
        // This is added to the Z position after being multiplied by random.nextGaussian()
        offsetZ = StreamUtils.readFloat(in);
        // The data of each particle
        particleData = StreamUtils.readFloat(in);
        // The number of particles to create
        particleCount = StreamUtils.readInt(in);
        // The variable data listed in the particle data type.
        data = StreamUtils.readVaries(in);
    }
    public static class Play_Client_Particle_Builder {
        private Play_Client_Particle object = new Play_Client_Particle();
        /** Packet ID */
        public Play_Client_Particle_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** The particle ID listed in the particle data type. */
        public Play_Client_Particle_Builder particleId(int particleId) {
            object.particleId = particleId;
            return this;
        }
        /** If true, particle distance increases from 256 to 65536 */
        public Play_Client_Particle_Builder longDistance(boolean longDistance) {
            object.longDistance = longDistance;
            return this;
        }
        /** X position of the particle */
        public Play_Client_Particle_Builder x(double x) {
            object.x = x;
            return this;
        }
        /** Y position of the particle */
        public Play_Client_Particle_Builder y(double y) {
            object.y = y;
            return this;
        }
        /** Z position of the particle */
        public Play_Client_Particle_Builder z(double z) {
            object.z = z;
            return this;
        }
        /** This is added to the X position after being multiplied by random.nextGaussian() */
        public Play_Client_Particle_Builder offsetX(float offsetX) {
            object.offsetX = offsetX;
            return this;
        }
        /** This is added to the Y position after being multiplied by random.nextGaussian() */
        public Play_Client_Particle_Builder offsetY(float offsetY) {
            object.offsetY = offsetY;
            return this;
        }
        /** This is added to the Z position after being multiplied by random.nextGaussian() */
        public Play_Client_Particle_Builder offsetZ(float offsetZ) {
            object.offsetZ = offsetZ;
            return this;
        }
        /** The data of each particle */
        public Play_Client_Particle_Builder particleData(float particleData) {
            object.particleData = particleData;
            return this;
        }
        /** The number of particles to create */
        public Play_Client_Particle_Builder particleCount(int particleCount) {
            object.particleCount = particleCount;
            return this;
        }
        /** The variable data listed in the particle data type. */
        public Play_Client_Particle_Builder data(Varies data) {
            object.data = data;
            return this;
        }
        public Play_Client_Particle build() {
             return object;
        }

    }
    public static Play_Client_Particle_Builder builder() {
        return new Play_Client_Particle_Builder();
    }
}