package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x08)
public class Play_Client_AcknowledgePlayerDigging extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x08;
    /** Position where the digging was happening */
    @MCType("Position")
    private byte[] location = new byte[8];
    /** Block state ID of the block that should be at that position now. */
    @MCType("VarInt")
    private int block;
    /** Same as Player Digging. Only Started digging (0), Cancelled digging (1), and Finished digging (2) are used. */
    @MCType("VarInt")
    private int status;
    /** True if the digging succeeded; false if the client should undo any changes it made locally. (How does this work?) */
    @MCType("Boolean")
    private boolean successful;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Position where the digging was happening
        packet.write(location);
        // Block state ID of the block that should be at that position now.
        packet.write(ByteUtils.encodeVarInt(block));
        // Same as Player Digging. Only Started digging (0), Cancelled digging (1), and Finished digging (2) are used.
        packet.write(ByteUtils.encodeVarInt(status));
        // True if the digging succeeded; false if the client should undo any changes it made locally. (How does this work?)
        packet.write(ByteUtils.encodeBoolean(successful));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Position where the digging was happening
        // TODO decode location
        // Block state ID of the block that should be at that position now.
        block = StreamUtils.readVarInt(in);
        // Same as Player Digging. Only Started digging (0), Cancelled digging (1), and Finished digging (2) are used.
        status = StreamUtils.readVarInt(in);
        // True if the digging succeeded; false if the client should undo any changes it made locally. (How does this work?)
        successful = StreamUtils.readBoolean(in);
    }
    public static class Play_Client_AcknowledgePlayerDigging_Builder {
        private Play_Client_AcknowledgePlayerDigging object = new Play_Client_AcknowledgePlayerDigging();
        /** Packet ID */
        public Play_Client_AcknowledgePlayerDigging_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Position where the digging was happening */
        public Play_Client_AcknowledgePlayerDigging_Builder location(byte[] location) {
            object.location = location;
            return this;
        }
        /** Block state ID of the block that should be at that position now. */
        public Play_Client_AcknowledgePlayerDigging_Builder block(int block) {
            object.block = block;
            return this;
        }
        /** Same as Player Digging. Only Started digging (0), Cancelled digging (1), and Finished digging (2) are used. */
        public Play_Client_AcknowledgePlayerDigging_Builder status(int status) {
            object.status = status;
            return this;
        }
        /** True if the digging succeeded; false if the client should undo any changes it made locally. (How does this work?) */
        public Play_Client_AcknowledgePlayerDigging_Builder successful(boolean successful) {
            object.successful = successful;
            return this;
        }
        public Play_Client_AcknowledgePlayerDigging build() {
             return object;
        }

    }
    public static Play_Client_AcknowledgePlayerDigging_Builder builder() {
        return new Play_Client_AcknowledgePlayerDigging_Builder();
    }
}