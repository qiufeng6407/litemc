package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x1D)
public class Play_Client_Explosion extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x1D;
    @MCType("Float")
    private float x;
    @MCType("Float")
    private float y;
    @MCType("Float")
    private float z;
    /** A strength greater than or equal to 2.0 spawns a minecraft:explosion_emitter particle, while a lesser strength spawns a minecraft:explosion particle. */
    @MCType("Float")
    private float strength;
    /** Number of elements in the following array */
    @MCType("Int")
    private int recordCount;
    /** Each record is 3 signed bytes long; the 3 bytes are the XYZ (respectively) signed offsets of affected blocks. */
    @MCType("Byte")
    private byte[] records = new byte[3];
    /** X velocity of the player being pushed by the explosion */
    @MCType("Float")
    private float playerMotionX;
    /** Y velocity of the player being pushed by the explosion */
    @MCType("Float")
    private float playerMotionY;
    /** Z velocity of the player being pushed by the explosion */
    @MCType("Float")
    private float playerMotionZ;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        packet.write(ByteUtils.encodeFloat(x));
        packet.write(ByteUtils.encodeFloat(y));
        packet.write(ByteUtils.encodeFloat(z));
        // A strength greater than or equal to 2.0 spawns a minecraft:explosion_emitter particle, while a lesser strength spawns a minecraft:explosion particle.
        packet.write(ByteUtils.encodeFloat(strength));
        // Number of elements in the following array
        packet.write(ByteUtils.encodeInt(recordCount));
        // Each record is 3 signed bytes long; the 3 bytes are the XYZ (respectively) signed offsets of affected blocks.
        packet.write(records);
        // X velocity of the player being pushed by the explosion
        packet.write(ByteUtils.encodeFloat(playerMotionX));
        // Y velocity of the player being pushed by the explosion
        packet.write(ByteUtils.encodeFloat(playerMotionY));
        // Z velocity of the player being pushed by the explosion
        packet.write(ByteUtils.encodeFloat(playerMotionZ));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        x = StreamUtils.readFloat(in);
        y = StreamUtils.readFloat(in);
        z = StreamUtils.readFloat(in);
        // A strength greater than or equal to 2.0 spawns a minecraft:explosion_emitter particle, while a lesser strength spawns a minecraft:explosion particle.
        strength = StreamUtils.readFloat(in);
        // Number of elements in the following array
        recordCount = StreamUtils.readInt(in);
        // Each record is 3 signed bytes long; the 3 bytes are the XYZ (respectively) signed offsets of affected blocks.
        records = new byte[recordCount];
        for (int i = 0; i < records.length; i++) {
            records[i] = StreamUtils.readByte(in);
        }
        // X velocity of the player being pushed by the explosion
        playerMotionX = StreamUtils.readFloat(in);
        // Y velocity of the player being pushed by the explosion
        playerMotionY = StreamUtils.readFloat(in);
        // Z velocity of the player being pushed by the explosion
        playerMotionZ = StreamUtils.readFloat(in);
    }
    public static class Play_Client_Explosion_Builder {
        private Play_Client_Explosion object = new Play_Client_Explosion();
        /** Packet ID */
        public Play_Client_Explosion_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        public Play_Client_Explosion_Builder x(float x) {
            object.x = x;
            return this;
        }
        public Play_Client_Explosion_Builder y(float y) {
            object.y = y;
            return this;
        }
        public Play_Client_Explosion_Builder z(float z) {
            object.z = z;
            return this;
        }
        /** A strength greater than or equal to 2.0 spawns a minecraft:explosion_emitter particle, while a lesser strength spawns a minecraft:explosion particle. */
        public Play_Client_Explosion_Builder strength(float strength) {
            object.strength = strength;
            return this;
        }
        /** Number of elements in the following array */
        public Play_Client_Explosion_Builder recordCount(int recordCount) {
            object.recordCount = recordCount;
            return this;
        }
        /** Each record is 3 signed bytes long; the 3 bytes are the XYZ (respectively) signed offsets of affected blocks. */
        public Play_Client_Explosion_Builder records(byte[] records) {
            object.records = records;
            return this;
        }
        /** X velocity of the player being pushed by the explosion */
        public Play_Client_Explosion_Builder playerMotionX(float playerMotionX) {
            object.playerMotionX = playerMotionX;
            return this;
        }
        /** Y velocity of the player being pushed by the explosion */
        public Play_Client_Explosion_Builder playerMotionY(float playerMotionY) {
            object.playerMotionY = playerMotionY;
            return this;
        }
        /** Z velocity of the player being pushed by the explosion */
        public Play_Client_Explosion_Builder playerMotionZ(float playerMotionZ) {
            object.playerMotionZ = playerMotionZ;
            return this;
        }
        public Play_Client_Explosion build() {
             return object;
        }

    }
    public static Play_Client_Explosion_Builder builder() {
        return new Play_Client_Explosion_Builder();
    }
}