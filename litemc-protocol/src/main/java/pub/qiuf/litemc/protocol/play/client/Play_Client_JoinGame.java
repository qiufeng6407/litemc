package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x26)
public class Play_Client_JoinGame extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x26;
    /** The player's Entity ID (EID) */
    @MCType("Int")
    private int entityId;
    /** 0: Survival, 1: Creative, 2: Adventure, 3: Spectator. Bit 3 (0x8) is the hardcore flag. */
    @MCType("UnsignedByte")
    private int gamemode;
    /** -1: Nether, 0: Overworld, 1: End; also, note that this is not a VarInt but instead a regular int. */
    @MCType("Int")
    private int dimension;
    /** First 8 bytes of the SHA-256 hash of the world's seed. */
    @MCType("Long")
    private long hashedSeed;
    /** Was once used by the client to draw the player list, but now is ignored */
    @MCType("UnsignedByte")
    private int maxPlayers;
    /** default, flat, largeBiomes, amplified, customized, buffet, default_1_1 */
    @MCType("String")
    private String levelType;
    /** Render distance (2-32) */
    @MCType("VarInt")
    private int viewDistance;
    /** If true, a Notchian client shows reduced information on the debug screen. For servers in development, this should almost always be false. */
    @MCType("Boolean")
    private boolean reducedDebugInfo;
    /** Set to false when the doImmediateRespawn gamerule is true */
    @MCType("Boolean")
    private boolean enableRespawnScreen;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // The player's Entity ID (EID)
        packet.write(ByteUtils.encodeInt(entityId));
        // 0: Survival, 1: Creative, 2: Adventure, 3: Spectator. Bit 3 (0x8) is the hardcore flag.
        packet.write(ByteUtils.encodeUnsignedByte(gamemode));
        // -1: Nether, 0: Overworld, 1: End; also, note that this is not a VarInt but instead a regular int.
        packet.write(ByteUtils.encodeInt(dimension));
        // First 8 bytes of the SHA-256 hash of the world's seed.
        packet.write(ByteUtils.encodeLong(hashedSeed));
        // Was once used by the client to draw the player list, but now is ignored
        packet.write(ByteUtils.encodeUnsignedByte(maxPlayers));
        // default, flat, largeBiomes, amplified, customized, buffet, default_1_1
        packet.write(ByteUtils.encodeString(levelType));
        // Render distance (2-32)
        packet.write(ByteUtils.encodeVarInt(viewDistance));
        // If true, a Notchian client shows reduced information on the debug screen. For servers in development, this should almost always be false.
        packet.write(ByteUtils.encodeBoolean(reducedDebugInfo));
        // Set to false when the doImmediateRespawn gamerule is true
        packet.write(ByteUtils.encodeBoolean(enableRespawnScreen));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // The player's Entity ID (EID)
        entityId = StreamUtils.readInt(in);
        // 0: Survival, 1: Creative, 2: Adventure, 3: Spectator. Bit 3 (0x8) is the hardcore flag.
        gamemode = StreamUtils.readUnsignedByte(in);
        // -1: Nether, 0: Overworld, 1: End; also, note that this is not a VarInt but instead a regular int.
        dimension = StreamUtils.readInt(in);
        // First 8 bytes of the SHA-256 hash of the world's seed.
        hashedSeed = StreamUtils.readLong(in);
        // Was once used by the client to draw the player list, but now is ignored
        maxPlayers = StreamUtils.readUnsignedByte(in);
        // default, flat, largeBiomes, amplified, customized, buffet, default_1_1
        levelType = StreamUtils.readString(in);
        // Render distance (2-32)
        viewDistance = StreamUtils.readVarInt(in);
        // If true, a Notchian client shows reduced information on the debug screen. For servers in development, this should almost always be false.
        reducedDebugInfo = StreamUtils.readBoolean(in);
        // Set to false when the doImmediateRespawn gamerule is true
        enableRespawnScreen = StreamUtils.readBoolean(in);
    }
    public static class Play_Client_JoinGame_Builder {
        private Play_Client_JoinGame object = new Play_Client_JoinGame();
        /** Packet ID */
        public Play_Client_JoinGame_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** The player's Entity ID (EID) */
        public Play_Client_JoinGame_Builder entityId(int entityId) {
            object.entityId = entityId;
            return this;
        }
        /** 0: Survival, 1: Creative, 2: Adventure, 3: Spectator. Bit 3 (0x8) is the hardcore flag. */
        public Play_Client_JoinGame_Builder gamemode(int gamemode) {
            object.gamemode = gamemode;
            return this;
        }
        /** -1: Nether, 0: Overworld, 1: End; also, note that this is not a VarInt but instead a regular int. */
        public Play_Client_JoinGame_Builder dimension(int dimension) {
            object.dimension = dimension;
            return this;
        }
        /** First 8 bytes of the SHA-256 hash of the world's seed. */
        public Play_Client_JoinGame_Builder hashedSeed(long hashedSeed) {
            object.hashedSeed = hashedSeed;
            return this;
        }
        /** Was once used by the client to draw the player list, but now is ignored */
        public Play_Client_JoinGame_Builder maxPlayers(int maxPlayers) {
            object.maxPlayers = maxPlayers;
            return this;
        }
        /** default, flat, largeBiomes, amplified, customized, buffet, default_1_1 */
        public Play_Client_JoinGame_Builder levelType(String levelType) {
            object.levelType = levelType;
            return this;
        }
        /** Render distance (2-32) */
        public Play_Client_JoinGame_Builder viewDistance(int viewDistance) {
            object.viewDistance = viewDistance;
            return this;
        }
        /** If true, a Notchian client shows reduced information on the debug screen. For servers in development, this should almost always be false. */
        public Play_Client_JoinGame_Builder reducedDebugInfo(boolean reducedDebugInfo) {
            object.reducedDebugInfo = reducedDebugInfo;
            return this;
        }
        /** Set to false when the doImmediateRespawn gamerule is true */
        public Play_Client_JoinGame_Builder enableRespawnScreen(boolean enableRespawnScreen) {
            object.enableRespawnScreen = enableRespawnScreen;
            return this;
        }
        public Play_Client_JoinGame build() {
             return object;
        }

    }
    public static Play_Client_JoinGame_Builder builder() {
        return new Play_Client_JoinGame_Builder();
    }
}