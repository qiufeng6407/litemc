package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x5A)
public class Play_Client_EntityEffect extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x5A;
    @MCType("VarInt")
    private int entityId;
    /** See this table */
    @MCType("Byte")
    private byte effectId;
    /** Notchian client displays effect level as Amplifier + 1 */
    @MCType("Byte")
    private byte amplifier;
    /** Duration in ticks. */
    @MCType("VarInt")
    private int duration;
    /** Bit field, see below. */
    @MCType("Byte")
    private byte flags;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        packet.write(ByteUtils.encodeVarInt(entityId));
        // See this table
        packet.write(ByteUtils.encodeByte(effectId));
        // Notchian client displays effect level as Amplifier + 1
        packet.write(ByteUtils.encodeByte(amplifier));
        // Duration in ticks.
        packet.write(ByteUtils.encodeVarInt(duration));
        // Bit field, see below.
        packet.write(ByteUtils.encodeByte(flags));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        entityId = StreamUtils.readVarInt(in);
        // See this table
        effectId = StreamUtils.readByte(in);
        // Notchian client displays effect level as Amplifier + 1
        amplifier = StreamUtils.readByte(in);
        // Duration in ticks.
        duration = StreamUtils.readVarInt(in);
        // Bit field, see below.
        flags = StreamUtils.readByte(in);
    }
    public static class Play_Client_EntityEffect_Builder {
        private Play_Client_EntityEffect object = new Play_Client_EntityEffect();
        /** Packet ID */
        public Play_Client_EntityEffect_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        public Play_Client_EntityEffect_Builder entityId(int entityId) {
            object.entityId = entityId;
            return this;
        }
        /** See this table */
        public Play_Client_EntityEffect_Builder effectId(byte effectId) {
            object.effectId = effectId;
            return this;
        }
        /** Notchian client displays effect level as Amplifier + 1 */
        public Play_Client_EntityEffect_Builder amplifier(byte amplifier) {
            object.amplifier = amplifier;
            return this;
        }
        /** Duration in ticks. */
        public Play_Client_EntityEffect_Builder duration(int duration) {
            object.duration = duration;
            return this;
        }
        /** Bit field, see below. */
        public Play_Client_EntityEffect_Builder flags(byte flags) {
            object.flags = flags;
            return this;
        }
        public Play_Client_EntityEffect build() {
             return object;
        }

    }
    public static Play_Client_EntityEffect_Builder builder() {
        return new Play_Client_EntityEffect_Builder();
    }
}