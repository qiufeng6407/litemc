package pub.qiuf.litemc.protocol.play.server;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
public class Play_Server_ClientSettings extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x05;
    /** e.g. en_GB */
    @MCType("String")
    private String locale;
    /** Client-side render distance, in chunks */
    @MCType("Byte")
    private byte viewDistance;
    /** 0: enabled, 1: commands only, 2: hidden. See processing chat for more information. */
    @MCType("VarInt")
    private int chatMode;
    /** “Colors” multiplayer setting */
    @MCType("Boolean")
    private boolean chatColors;
    /** Bit mask, see below */
    @MCType("UnsignedByte")
    private int displayedSkinParts;
    /** 0: Left, 1: Right */
    @MCType("VarInt")
    private int mainHand;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // e.g. en_GB
        packet.write(ByteUtils.encodeString(locale));
        // Client-side render distance, in chunks
        packet.write(ByteUtils.encodeByte(viewDistance));
        // 0: enabled, 1: commands only, 2: hidden. See processing chat for more information.
        packet.write(ByteUtils.encodeVarInt(chatMode));
        // “Colors” multiplayer setting
        packet.write(ByteUtils.encodeBoolean(chatColors));
        // Bit mask, see below
        packet.write(ByteUtils.encodeUnsignedByte(displayedSkinParts));
        // 0: Left, 1: Right
        packet.write(ByteUtils.encodeVarInt(mainHand));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // e.g. en_GB
        locale = StreamUtils.readString(in);
        // Client-side render distance, in chunks
        viewDistance = StreamUtils.readByte(in);
        // 0: enabled, 1: commands only, 2: hidden. See processing chat for more information.
        chatMode = StreamUtils.readVarInt(in);
        // “Colors” multiplayer setting
        chatColors = StreamUtils.readBoolean(in);
        // Bit mask, see below
        displayedSkinParts = StreamUtils.readUnsignedByte(in);
        // 0: Left, 1: Right
        mainHand = StreamUtils.readVarInt(in);
    }
    public static class Play_Server_ClientSettings_Builder {
        private Play_Server_ClientSettings object = new Play_Server_ClientSettings();
        /** Packet ID */
        public Play_Server_ClientSettings_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** e.g. en_GB */
        public Play_Server_ClientSettings_Builder locale(String locale) {
            object.locale = locale;
            return this;
        }
        /** Client-side render distance, in chunks */
        public Play_Server_ClientSettings_Builder viewDistance(byte viewDistance) {
            object.viewDistance = viewDistance;
            return this;
        }
        /** 0: enabled, 1: commands only, 2: hidden. See processing chat for more information. */
        public Play_Server_ClientSettings_Builder chatMode(int chatMode) {
            object.chatMode = chatMode;
            return this;
        }
        /** “Colors” multiplayer setting */
        public Play_Server_ClientSettings_Builder chatColors(boolean chatColors) {
            object.chatColors = chatColors;
            return this;
        }
        /** Bit mask, see below */
        public Play_Server_ClientSettings_Builder displayedSkinParts(int displayedSkinParts) {
            object.displayedSkinParts = displayedSkinParts;
            return this;
        }
        /** 0: Left, 1: Right */
        public Play_Server_ClientSettings_Builder mainHand(int mainHand) {
            object.mainHand = mainHand;
            return this;
        }
        public Play_Server_ClientSettings build() {
             return object;
        }

    }
    public static Play_Server_ClientSettings_Builder builder() {
        return new Play_Server_ClientSettings_Builder();
    }
}