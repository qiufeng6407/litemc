package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.bean.datatype.AdvancementProgress;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;
import pub.qiuf.litemc.common.bean.datatype.Advancement;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x58)
public class Play_Client_Advancements extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x58;
    /** Whether to reset/clear the current advancements */
    @MCType("Boolean")
    private boolean resetClear;
    /** Size of the following array */
    @MCType("VarInt")
    private int mappingSize;
    @MCType("Play_Client_Advancements_AdvancementMapping")
    private Play_Client_Advancements_AdvancementMapping[] advancementMapping;
    /** Size of the following array */
    @MCType("VarInt")
    private int listSize;
    /** The identifiers of the advancements that should be removed */
    @MCType("Identifier")
    private String[] identifiers;
    /** Size of the following array */
    @MCType("VarInt")
    private int progressSize;
    @MCType("Play_Client_Advancements_ProgressMapping")
    private Play_Client_Advancements_ProgressMapping[] progressMapping;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Whether to reset/clear the current advancements
        packet.write(ByteUtils.encodeBoolean(resetClear));
        // Size of the following array
        packet.write(ByteUtils.encodeVarInt(mappingSize));
        for (Play_Client_Advancements_AdvancementMapping temp : advancementMapping) {
            packet.write(temp.encode());
        }
        // Size of the following array
        packet.write(ByteUtils.encodeVarInt(listSize));
        // The identifiers of the advancements that should be removed
        for (String temp : identifiers) {
            packet.write(ByteUtils.encodeString(temp));
        }
        // Size of the following array
        packet.write(ByteUtils.encodeVarInt(progressSize));
        for (Play_Client_Advancements_ProgressMapping temp : progressMapping) {
            packet.write(temp.encode());
        }
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Whether to reset/clear the current advancements
        resetClear = StreamUtils.readBoolean(in);
        // Size of the following array
        mappingSize = StreamUtils.readVarInt(in);
        advancementMapping = new Play_Client_Advancements_AdvancementMapping[mappingSize];
        for (int i = 0; i < advancementMapping.length; i++) {
            advancementMapping[i] = new Play_Client_Advancements_AdvancementMapping();
            advancementMapping[i].decode(in);
        }
        // Size of the following array
        listSize = StreamUtils.readVarInt(in);
        // The identifiers of the advancements that should be removed
        identifiers = new String[listSize];
        for (int i = 0; i < identifiers.length; i++) {
            identifiers[i] = StreamUtils.readIdentifier(in);
        }
        // Size of the following array
        progressSize = StreamUtils.readVarInt(in);
        progressMapping = new Play_Client_Advancements_ProgressMapping[progressSize];
        for (int i = 0; i < progressMapping.length; i++) {
            progressMapping[i] = new Play_Client_Advancements_ProgressMapping();
            progressMapping[i].decode(in);
        }
    }
    @Data
    public static class Play_Client_Advancements_AdvancementMapping extends Packet {
        /** The identifier of the advancement */
        @MCType("Identifier")
        private String key;
        /** See below */
        @MCType("Advancement")
        private Advancement value;

        @Override
        public byte[] encode() throws Exception {
            ByteArrayDataOutput packet = ByteStreams.newDataOutput();
            // The identifier of the advancement
            packet.write(ByteUtils.encodeIdentifier(key));
            // See below
            packet.write(ByteUtils.encodeAdvancement(value));
            return packet.toByteArray();
        }
        @Override
        public void decode(ByteArrayDataInput in) throws Exception {
            // The identifier of the advancement
            key = StreamUtils.readIdentifier(in);
            // See below
            value = StreamUtils.readAdvancement(in);
        }
    }
    @FunctionalInterface
    public interface Play_Client_Advancements_AdvancementMapping_Provider {
        Play_Client_Advancements_AdvancementMapping[] provide();
    }
    public static Play_Client_Advancements_AdvancementMapping_Builder advancementMappingBuilder() {
        return new Play_Client_Advancements_AdvancementMapping_Builder();
    }
    public static class Play_Client_Advancements_AdvancementMapping_Builder {
        private Play_Client_Advancements_AdvancementMapping object = new Play_Client_Advancements_AdvancementMapping();
        /** The identifier of the advancement */
        public Play_Client_Advancements_AdvancementMapping_Builder key(String key) {
            object.key = key;
            return this;
        }
        /** See below */
        public Play_Client_Advancements_AdvancementMapping_Builder value(Advancement value) {
            object.value = value;
            return this;
        }
        public Play_Client_Advancements_AdvancementMapping build() {
             return object;
        }

    }
    @Data
    public static class Play_Client_Advancements_ProgressMapping extends Packet {
        /** The identifier of the advancement */
        @MCType("Identifier")
        private String key;
        /** See below */
        @MCType("AdvancementProgress")
        private AdvancementProgress value;

        @Override
        public byte[] encode() throws Exception {
            ByteArrayDataOutput packet = ByteStreams.newDataOutput();
            // The identifier of the advancement
            packet.write(ByteUtils.encodeIdentifier(key));
            // See below
            packet.write(ByteUtils.encodeAdvancementProgress(value));
            return packet.toByteArray();
        }
        @Override
        public void decode(ByteArrayDataInput in) throws Exception {
            // The identifier of the advancement
            key = StreamUtils.readIdentifier(in);
            // See below
            value = StreamUtils.readAdvancementProgress(in);
        }
    }
    @FunctionalInterface
    public interface Play_Client_Advancements_ProgressMapping_Provider {
        Play_Client_Advancements_ProgressMapping[] provide();
    }
    public static Play_Client_Advancements_ProgressMapping_Builder progressMappingBuilder() {
        return new Play_Client_Advancements_ProgressMapping_Builder();
    }
    public static class Play_Client_Advancements_ProgressMapping_Builder {
        private Play_Client_Advancements_ProgressMapping object = new Play_Client_Advancements_ProgressMapping();
        /** The identifier of the advancement */
        public Play_Client_Advancements_ProgressMapping_Builder key(String key) {
            object.key = key;
            return this;
        }
        /** See below */
        public Play_Client_Advancements_ProgressMapping_Builder value(AdvancementProgress value) {
            object.value = value;
            return this;
        }
        public Play_Client_Advancements_ProgressMapping build() {
             return object;
        }

    }
    public static class Play_Client_Advancements_Builder {
        private Play_Client_Advancements object = new Play_Client_Advancements();
        /** Packet ID */
        public Play_Client_Advancements_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Whether to reset/clear the current advancements */
        public Play_Client_Advancements_Builder resetClear(boolean resetClear) {
            object.resetClear = resetClear;
            return this;
        }
        /** Size of the following array */
        public Play_Client_Advancements_Builder mappingSize(int mappingSize) {
            object.mappingSize = mappingSize;
            return this;
        }
        public Play_Client_Advancements_Builder advancementMapping(Play_Client_Advancements_AdvancementMapping_Provider provider) {
            object.advancementMapping = provider.provide();
            return this;
        }
        /** Size of the following array */
        public Play_Client_Advancements_Builder listSize(int listSize) {
            object.listSize = listSize;
            return this;
        }
        /** The identifiers of the advancements that should be removed */
        public Play_Client_Advancements_Builder identifiers(String[] identifiers) {
            object.identifiers = identifiers;
            return this;
        }
        /** Size of the following array */
        public Play_Client_Advancements_Builder progressSize(int progressSize) {
            object.progressSize = progressSize;
            return this;
        }
        public Play_Client_Advancements_Builder progressMapping(Play_Client_Advancements_ProgressMapping_Provider provider) {
            object.progressMapping = provider.provide();
            return this;
        }
        public Play_Client_Advancements build() {
             return object;
        }

    }
    public static Play_Client_Advancements_Builder builder() {
        return new Play_Client_Advancements_Builder();
    }
}