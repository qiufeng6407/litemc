package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x0D)
public class Play_Client_BossBar extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x0D;
    /** Unique ID for this bar */
    @MCType("UUID")
    private long[] uuid = new long[2];
    /** Determines the layout of the remaining packet */
    @MCType("VarInt")
    private int action;
    @MCType("Play_Client_BossBar_Add")
    private Play_Client_BossBar_Add add;
    /** as above */
    @MCType("Float")
    private float health;
    @MCType("Chat")
    private String title;
    @MCType("Play_Client_BossBar_UpdateStyle")
    private Play_Client_BossBar_UpdateStyle updateStyle;
    /** as above */
    @MCType("UnsignedByte")
    private int flags;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Unique ID for this bar
        for (long temp : uuid) {
            packet.write(ByteUtils.encodeLong(temp));
        }
        // Determines the layout of the remaining packet
        packet.write(ByteUtils.encodeVarInt(action));
        packet.write(add.encode());
        // as above
        packet.write(ByteUtils.encodeFloat(health));
        packet.write(ByteUtils.encodeChat(title));
        packet.write(updateStyle.encode());
        // as above
        packet.write(ByteUtils.encodeUnsignedByte(flags));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Unique ID for this bar
        // TODO decode uuid
        // Determines the layout of the remaining packet
        action = StreamUtils.readVarInt(in);
        add = new Play_Client_BossBar_Add();
        add.decode(in);
        // as above
        health = StreamUtils.readFloat(in);
        title = StreamUtils.readChat(in);
        updateStyle = new Play_Client_BossBar_UpdateStyle();
        updateStyle.decode(in);
        // as above
        flags = StreamUtils.readUnsignedByte(in);
    }
    @Data
    public static class Play_Client_BossBar_Add extends Packet {
        @MCType("Chat")
        private String title;
        /** From 0 to 1. Values greater than 1 do not crash a Notchian client, and start rendering part of a second health bar at around 1.5. */
        @MCType("Float")
        private float health;
        /** Color ID (see below) */
        @MCType("VarInt")
        private int color;
        /** Type of division (see below) */
        @MCType("VarInt")
        private int division;
        /** Bit mask. 0x1: should darken sky, 0x2: is dragon bar (used to play end music), 0x04: create fog (previously was also controlled by 0x02) */
        @MCType("UnsignedByte")
        private int flags;

        @Override
        public byte[] encode() throws Exception {
            ByteArrayDataOutput packet = ByteStreams.newDataOutput();
            packet.write(ByteUtils.encodeChat(title));
            // From 0 to 1. Values greater than 1 do not crash a Notchian client, and start rendering part of a second health bar at around 1.5.
            packet.write(ByteUtils.encodeFloat(health));
            // Color ID (see below)
            packet.write(ByteUtils.encodeVarInt(color));
            // Type of division (see below)
            packet.write(ByteUtils.encodeVarInt(division));
            // Bit mask. 0x1: should darken sky, 0x2: is dragon bar (used to play end music), 0x04: create fog (previously was also controlled by 0x02)
            packet.write(ByteUtils.encodeUnsignedByte(flags));
            return packet.toByteArray();
        }
        @Override
        public void decode(ByteArrayDataInput in) throws Exception {
            title = StreamUtils.readChat(in);
            // From 0 to 1. Values greater than 1 do not crash a Notchian client, and start rendering part of a second health bar at around 1.5.
            health = StreamUtils.readFloat(in);
            // Color ID (see below)
            color = StreamUtils.readVarInt(in);
            // Type of division (see below)
            division = StreamUtils.readVarInt(in);
            // Bit mask. 0x1: should darken sky, 0x2: is dragon bar (used to play end music), 0x04: create fog (previously was also controlled by 0x02)
            flags = StreamUtils.readUnsignedByte(in);
        }
    }
    @FunctionalInterface
    public interface Play_Client_BossBar_Add_Provider {
        Play_Client_BossBar_Add provide();
    }
    public static Play_Client_BossBar_Add_Builder addBuilder() {
        return new Play_Client_BossBar_Add_Builder();
    }
    public static class Play_Client_BossBar_Add_Builder {
        private Play_Client_BossBar_Add object = new Play_Client_BossBar_Add();
        public Play_Client_BossBar_Add_Builder title(String title) {
            object.title = title;
            return this;
        }
        /** From 0 to 1. Values greater than 1 do not crash a Notchian client, and start rendering part of a second health bar at around 1.5. */
        public Play_Client_BossBar_Add_Builder health(float health) {
            object.health = health;
            return this;
        }
        /** Color ID (see below) */
        public Play_Client_BossBar_Add_Builder color(int color) {
            object.color = color;
            return this;
        }
        /** Type of division (see below) */
        public Play_Client_BossBar_Add_Builder division(int division) {
            object.division = division;
            return this;
        }
        /** Bit mask. 0x1: should darken sky, 0x2: is dragon bar (used to play end music), 0x04: create fog (previously was also controlled by 0x02) */
        public Play_Client_BossBar_Add_Builder flags(int flags) {
            object.flags = flags;
            return this;
        }
        public Play_Client_BossBar_Add build() {
             return object;
        }

    }
    @Data
    public static class Play_Client_BossBar_UpdateStyle extends Packet {
        /** Color ID (see below) */
        @MCType("VarInt")
        private int color;
        /** as above */
        @MCType("VarInt")
        private int dividers;

        @Override
        public byte[] encode() throws Exception {
            ByteArrayDataOutput packet = ByteStreams.newDataOutput();
            // Color ID (see below)
            packet.write(ByteUtils.encodeVarInt(color));
            // as above
            packet.write(ByteUtils.encodeVarInt(dividers));
            return packet.toByteArray();
        }
        @Override
        public void decode(ByteArrayDataInput in) throws Exception {
            // Color ID (see below)
            color = StreamUtils.readVarInt(in);
            // as above
            dividers = StreamUtils.readVarInt(in);
        }
    }
    @FunctionalInterface
    public interface Play_Client_BossBar_UpdateStyle_Provider {
        Play_Client_BossBar_UpdateStyle provide();
    }
    public static Play_Client_BossBar_UpdateStyle_Builder updateStyleBuilder() {
        return new Play_Client_BossBar_UpdateStyle_Builder();
    }
    public static class Play_Client_BossBar_UpdateStyle_Builder {
        private Play_Client_BossBar_UpdateStyle object = new Play_Client_BossBar_UpdateStyle();
        /** Color ID (see below) */
        public Play_Client_BossBar_UpdateStyle_Builder color(int color) {
            object.color = color;
            return this;
        }
        /** as above */
        public Play_Client_BossBar_UpdateStyle_Builder dividers(int dividers) {
            object.dividers = dividers;
            return this;
        }
        public Play_Client_BossBar_UpdateStyle build() {
             return object;
        }

    }
    public static class Play_Client_BossBar_Builder {
        private Play_Client_BossBar object = new Play_Client_BossBar();
        /** Packet ID */
        public Play_Client_BossBar_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Unique ID for this bar */
        public Play_Client_BossBar_Builder uuid(long[] uuid) {
            object.uuid = uuid;
            return this;
        }
        /** Determines the layout of the remaining packet */
        public Play_Client_BossBar_Builder action(int action) {
            object.action = action;
            return this;
        }
        public Play_Client_BossBar_Builder add(Play_Client_BossBar_Add_Provider provider) {
            object.add = provider.provide();
            return this;
        }
        /** as above */
        public Play_Client_BossBar_Builder health(float health) {
            object.health = health;
            return this;
        }
        public Play_Client_BossBar_Builder title(String title) {
            object.title = title;
            return this;
        }
        public Play_Client_BossBar_Builder updateStyle(Play_Client_BossBar_UpdateStyle_Provider provider) {
            object.updateStyle = provider.provide();
            return this;
        }
        /** as above */
        public Play_Client_BossBar_Builder flags(int flags) {
            object.flags = flags;
            return this;
        }
        public Play_Client_BossBar build() {
             return object;
        }

    }
    public static Play_Client_BossBar_Builder builder() {
        return new Play_Client_BossBar_Builder();
    }
}