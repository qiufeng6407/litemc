package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.bean.datatype.Slot;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x15)
public class Play_Client_WindowItems extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x15;
    /** The ID of window which items are being sent for. 0 for player inventory. */
    @MCType("UnsignedByte")
    private int windowId;
    /** Number of elements in the following array */
    @MCType("Short")
    private short count;
    @MCType("Slot")
    private Slot[] slotData;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // The ID of window which items are being sent for. 0 for player inventory.
        packet.write(ByteUtils.encodeUnsignedByte(windowId));
        // Number of elements in the following array
        packet.write(ByteUtils.encodeShort(count));
        for (Slot temp : slotData) {
            packet.write(ByteUtils.encodeSlot(temp));
        }
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // The ID of window which items are being sent for. 0 for player inventory.
        windowId = StreamUtils.readUnsignedByte(in);
        // Number of elements in the following array
        count = StreamUtils.readShort(in);
        slotData = new Slot[count];
        for (int i = 0; i < slotData.length; i++) {
            slotData[i] = StreamUtils.readSlot(in);
        }
    }
    public static class Play_Client_WindowItems_Builder {
        private Play_Client_WindowItems object = new Play_Client_WindowItems();
        /** Packet ID */
        public Play_Client_WindowItems_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** The ID of window which items are being sent for. 0 for player inventory. */
        public Play_Client_WindowItems_Builder windowId(int windowId) {
            object.windowId = windowId;
            return this;
        }
        /** Number of elements in the following array */
        public Play_Client_WindowItems_Builder count(short count) {
            object.count = count;
            return this;
        }
        public Play_Client_WindowItems_Builder slotData(Slot[] slotData) {
            object.slotData = slotData;
            return this;
        }
        public Play_Client_WindowItems build() {
             return object;
        }

    }
    public static Play_Client_WindowItems_Builder builder() {
        return new Play_Client_WindowItems_Builder();
    }
}