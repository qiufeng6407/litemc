package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x10)
public class Play_Client_MultiBlockChange extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x10;
    /** Chunk X coordinate */
    @MCType("Int")
    private int chunkX;
    /** Chunk Z coordinate */
    @MCType("Int")
    private int chunkZ;
    /** Number of elements in the following array, i.e. the number of blocks affected */
    @MCType("VarInt")
    private int recordCount;
    @MCType("Play_Client_MultiBlockChange_Record")
    private Play_Client_MultiBlockChange_Record[] record;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Chunk X coordinate
        packet.write(ByteUtils.encodeInt(chunkX));
        // Chunk Z coordinate
        packet.write(ByteUtils.encodeInt(chunkZ));
        // Number of elements in the following array, i.e. the number of blocks affected
        packet.write(ByteUtils.encodeVarInt(recordCount));
        for (Play_Client_MultiBlockChange_Record temp : record) {
            packet.write(temp.encode());
        }
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Chunk X coordinate
        chunkX = StreamUtils.readInt(in);
        // Chunk Z coordinate
        chunkZ = StreamUtils.readInt(in);
        // Number of elements in the following array, i.e. the number of blocks affected
        recordCount = StreamUtils.readVarInt(in);
        record = new Play_Client_MultiBlockChange_Record[recordCount];
        for (int i = 0; i < record.length; i++) {
            record[i] = new Play_Client_MultiBlockChange_Record();
            record[i].decode(in);
        }
    }
    @Data
    public static class Play_Client_MultiBlockChange_Record extends Packet {
        /** The 4 most significant bits (0xF0) encode the X coordinate, relative to the chunk. The 4 least significant bits (0x0F) encode the Z coordinate, relative to the chunk. */
        @MCType("UnsignedByte")
        private int horizontalPosition;
        /** Y coordinate of the block */
        @MCType("UnsignedByte")
        private int yCoordinate;
        /** The new block state ID for the block as given in the global palette. See that section for more information. */
        @MCType("VarInt")
        private int blockId;

        @Override
        public byte[] encode() throws Exception {
            ByteArrayDataOutput packet = ByteStreams.newDataOutput();
            // The 4 most significant bits (0xF0) encode the X coordinate, relative to the chunk. The 4 least significant bits (0x0F) encode the Z coordinate, relative to the chunk.
            packet.write(ByteUtils.encodeUnsignedByte(horizontalPosition));
            // Y coordinate of the block
            packet.write(ByteUtils.encodeUnsignedByte(yCoordinate));
            // The new block state ID for the block as given in the global palette. See that section for more information.
            packet.write(ByteUtils.encodeVarInt(blockId));
            return packet.toByteArray();
        }
        @Override
        public void decode(ByteArrayDataInput in) throws Exception {
            // The 4 most significant bits (0xF0) encode the X coordinate, relative to the chunk. The 4 least significant bits (0x0F) encode the Z coordinate, relative to the chunk.
            horizontalPosition = StreamUtils.readUnsignedByte(in);
            // Y coordinate of the block
            yCoordinate = StreamUtils.readUnsignedByte(in);
            // The new block state ID for the block as given in the global palette. See that section for more information.
            blockId = StreamUtils.readVarInt(in);
        }
    }
    @FunctionalInterface
    public interface Play_Client_MultiBlockChange_Record_Provider {
        Play_Client_MultiBlockChange_Record[] provide();
    }
    public static Play_Client_MultiBlockChange_Record_Builder recordBuilder() {
        return new Play_Client_MultiBlockChange_Record_Builder();
    }
    public static class Play_Client_MultiBlockChange_Record_Builder {
        private Play_Client_MultiBlockChange_Record object = new Play_Client_MultiBlockChange_Record();
        /** The 4 most significant bits (0xF0) encode the X coordinate, relative to the chunk. The 4 least significant bits (0x0F) encode the Z coordinate, relative to the chunk. */
        public Play_Client_MultiBlockChange_Record_Builder horizontalPosition(int horizontalPosition) {
            object.horizontalPosition = horizontalPosition;
            return this;
        }
        /** Y coordinate of the block */
        public Play_Client_MultiBlockChange_Record_Builder yCoordinate(int yCoordinate) {
            object.yCoordinate = yCoordinate;
            return this;
        }
        /** The new block state ID for the block as given in the global palette. See that section for more information. */
        public Play_Client_MultiBlockChange_Record_Builder blockId(int blockId) {
            object.blockId = blockId;
            return this;
        }
        public Play_Client_MultiBlockChange_Record build() {
             return object;
        }

    }
    public static class Play_Client_MultiBlockChange_Builder {
        private Play_Client_MultiBlockChange object = new Play_Client_MultiBlockChange();
        /** Packet ID */
        public Play_Client_MultiBlockChange_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Chunk X coordinate */
        public Play_Client_MultiBlockChange_Builder chunkX(int chunkX) {
            object.chunkX = chunkX;
            return this;
        }
        /** Chunk Z coordinate */
        public Play_Client_MultiBlockChange_Builder chunkZ(int chunkZ) {
            object.chunkZ = chunkZ;
            return this;
        }
        /** Number of elements in the following array, i.e. the number of blocks affected */
        public Play_Client_MultiBlockChange_Builder recordCount(int recordCount) {
            object.recordCount = recordCount;
            return this;
        }
        public Play_Client_MultiBlockChange_Builder record(Play_Client_MultiBlockChange_Record_Provider provider) {
            object.record = provider.provide();
            return this;
        }
        public Play_Client_MultiBlockChange build() {
             return object;
        }

    }
    public static Play_Client_MultiBlockChange_Builder builder() {
        return new Play_Client_MultiBlockChange_Builder();
    }
}