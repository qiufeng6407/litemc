package pub.qiuf.litemc.protocol.play.server;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
public class Play_Server_PlayerBlockPlacement extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x2C;
    /** The hand from which the block is placed; 0: main hand, 1: off hand */
    @MCType("VarInt")
    private int hand;
    /** Block position */
    @MCType("Position")
    private byte[] location = new byte[8];
    /** The face on which the block is placed (as documented at Player Digging) */
    @MCType("VarInt")
    private int face;
    /** The position of the crosshair on the block, from 0 to 1 increasing from west to east */
    @MCType("Float")
    private float cursorPositionX;
    /** The position of the crosshair on the block, from 0 to 1 increasing from bottom to top */
    @MCType("Float")
    private float cursorPositionY;
    /** The position of the crosshair on the block, from 0 to 1 increasing from north to south */
    @MCType("Float")
    private float cursorPositionZ;
    /** True when the player's head is inside of a block. */
    @MCType("Boolean")
    private boolean insideBlock;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // The hand from which the block is placed; 0: main hand, 1: off hand
        packet.write(ByteUtils.encodeVarInt(hand));
        // Block position
        packet.write(location);
        // The face on which the block is placed (as documented at Player Digging)
        packet.write(ByteUtils.encodeVarInt(face));
        // The position of the crosshair on the block, from 0 to 1 increasing from west to east
        packet.write(ByteUtils.encodeFloat(cursorPositionX));
        // The position of the crosshair on the block, from 0 to 1 increasing from bottom to top
        packet.write(ByteUtils.encodeFloat(cursorPositionY));
        // The position of the crosshair on the block, from 0 to 1 increasing from north to south
        packet.write(ByteUtils.encodeFloat(cursorPositionZ));
        // True when the player's head is inside of a block.
        packet.write(ByteUtils.encodeBoolean(insideBlock));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // The hand from which the block is placed; 0: main hand, 1: off hand
        hand = StreamUtils.readVarInt(in);
        // Block position
        // TODO decode location
        // The face on which the block is placed (as documented at Player Digging)
        face = StreamUtils.readVarInt(in);
        // The position of the crosshair on the block, from 0 to 1 increasing from west to east
        cursorPositionX = StreamUtils.readFloat(in);
        // The position of the crosshair on the block, from 0 to 1 increasing from bottom to top
        cursorPositionY = StreamUtils.readFloat(in);
        // The position of the crosshair on the block, from 0 to 1 increasing from north to south
        cursorPositionZ = StreamUtils.readFloat(in);
        // True when the player's head is inside of a block.
        insideBlock = StreamUtils.readBoolean(in);
    }
    public static class Play_Server_PlayerBlockPlacement_Builder {
        private Play_Server_PlayerBlockPlacement object = new Play_Server_PlayerBlockPlacement();
        /** Packet ID */
        public Play_Server_PlayerBlockPlacement_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** The hand from which the block is placed; 0: main hand, 1: off hand */
        public Play_Server_PlayerBlockPlacement_Builder hand(int hand) {
            object.hand = hand;
            return this;
        }
        /** Block position */
        public Play_Server_PlayerBlockPlacement_Builder location(byte[] location) {
            object.location = location;
            return this;
        }
        /** The face on which the block is placed (as documented at Player Digging) */
        public Play_Server_PlayerBlockPlacement_Builder face(int face) {
            object.face = face;
            return this;
        }
        /** The position of the crosshair on the block, from 0 to 1 increasing from west to east */
        public Play_Server_PlayerBlockPlacement_Builder cursorPositionX(float cursorPositionX) {
            object.cursorPositionX = cursorPositionX;
            return this;
        }
        /** The position of the crosshair on the block, from 0 to 1 increasing from bottom to top */
        public Play_Server_PlayerBlockPlacement_Builder cursorPositionY(float cursorPositionY) {
            object.cursorPositionY = cursorPositionY;
            return this;
        }
        /** The position of the crosshair on the block, from 0 to 1 increasing from north to south */
        public Play_Server_PlayerBlockPlacement_Builder cursorPositionZ(float cursorPositionZ) {
            object.cursorPositionZ = cursorPositionZ;
            return this;
        }
        /** True when the player's head is inside of a block. */
        public Play_Server_PlayerBlockPlacement_Builder insideBlock(boolean insideBlock) {
            object.insideBlock = insideBlock;
            return this;
        }
        public Play_Server_PlayerBlockPlacement build() {
             return object;
        }

    }
    public static Play_Server_PlayerBlockPlacement_Builder builder() {
        return new Play_Server_PlayerBlockPlacement_Builder();
    }
}