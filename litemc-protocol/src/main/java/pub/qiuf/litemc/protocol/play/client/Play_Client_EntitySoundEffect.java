package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x51)
public class Play_Client_EntitySoundEffect extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x51;
    /** ID of hardcoded sound event (events as of 1.15.2) */
    @MCType("VarInt")
    private int soundId;
    /** The category that this sound will be played from (current categories) */
    @MCType("VarInt")
    private int soundCategory;
    @MCType("VarInt")
    private int entityId;
    /** 1.0 is 100%, capped between 0.0 and 1.0 by Notchian clients */
    @MCType("Float")
    private float volume;
    /** Float between 0.5 and 2.0 by Notchian clients */
    @MCType("Float")
    private float pitch;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // ID of hardcoded sound event (events as of 1.15.2)
        packet.write(ByteUtils.encodeVarInt(soundId));
        // The category that this sound will be played from (current categories)
        packet.write(ByteUtils.encodeVarInt(soundCategory));
        packet.write(ByteUtils.encodeVarInt(entityId));
        // 1.0 is 100%, capped between 0.0 and 1.0 by Notchian clients
        packet.write(ByteUtils.encodeFloat(volume));
        // Float between 0.5 and 2.0 by Notchian clients
        packet.write(ByteUtils.encodeFloat(pitch));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // ID of hardcoded sound event (events as of 1.15.2)
        soundId = StreamUtils.readVarInt(in);
        // The category that this sound will be played from (current categories)
        soundCategory = StreamUtils.readVarInt(in);
        entityId = StreamUtils.readVarInt(in);
        // 1.0 is 100%, capped between 0.0 and 1.0 by Notchian clients
        volume = StreamUtils.readFloat(in);
        // Float between 0.5 and 2.0 by Notchian clients
        pitch = StreamUtils.readFloat(in);
    }
    public static class Play_Client_EntitySoundEffect_Builder {
        private Play_Client_EntitySoundEffect object = new Play_Client_EntitySoundEffect();
        /** Packet ID */
        public Play_Client_EntitySoundEffect_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** ID of hardcoded sound event (events as of 1.15.2) */
        public Play_Client_EntitySoundEffect_Builder soundId(int soundId) {
            object.soundId = soundId;
            return this;
        }
        /** The category that this sound will be played from (current categories) */
        public Play_Client_EntitySoundEffect_Builder soundCategory(int soundCategory) {
            object.soundCategory = soundCategory;
            return this;
        }
        public Play_Client_EntitySoundEffect_Builder entityId(int entityId) {
            object.entityId = entityId;
            return this;
        }
        /** 1.0 is 100%, capped between 0.0 and 1.0 by Notchian clients */
        public Play_Client_EntitySoundEffect_Builder volume(float volume) {
            object.volume = volume;
            return this;
        }
        /** Float between 0.5 and 2.0 by Notchian clients */
        public Play_Client_EntitySoundEffect_Builder pitch(float pitch) {
            object.pitch = pitch;
            return this;
        }
        public Play_Client_EntitySoundEffect build() {
             return object;
        }

    }
    public static Play_Client_EntitySoundEffect_Builder builder() {
        return new Play_Client_EntitySoundEffect_Builder();
    }
}