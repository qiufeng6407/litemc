package pub.qiuf.litemc.protocol.login.server;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
public class Login_Server_LoginPluginResponse extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x02;
    /** Should match ID from server. */
    @MCType("VarInt")
    private int messageId;
    /** true if the client understands the request, false otherwise. When false, no payload follows. */
    @MCType("Boolean")
    private boolean successful;
    /** Any data, depending on the channel. The length of this array must be inferred from the packet length. */
    @MCType("Byte")
    private byte[] data;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Should match ID from server.
        packet.write(ByteUtils.encodeVarInt(messageId));
        // true if the client understands the request, false otherwise. When false, no payload follows.
        packet.write(ByteUtils.encodeBoolean(successful));
        // Any data, depending on the channel. The length of this array must be inferred from the packet length.
        packet.write(data);
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Should match ID from server.
        messageId = StreamUtils.readVarInt(in);
        // true if the client understands the request, false otherwise. When false, no payload follows.
        successful = StreamUtils.readBoolean(in);
        // Any data, depending on the channel. The length of this array must be inferred from the packet length.
        // TODO decode data
    }
    public static class Login_Server_LoginPluginResponse_Builder {
        private Login_Server_LoginPluginResponse object = new Login_Server_LoginPluginResponse();
        /** Packet ID */
        public Login_Server_LoginPluginResponse_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Should match ID from server. */
        public Login_Server_LoginPluginResponse_Builder messageId(int messageId) {
            object.messageId = messageId;
            return this;
        }
        /** true if the client understands the request, false otherwise. When false, no payload follows. */
        public Login_Server_LoginPluginResponse_Builder successful(boolean successful) {
            object.successful = successful;
            return this;
        }
        /** Any data, depending on the channel. The length of this array must be inferred from the packet length. */
        public Login_Server_LoginPluginResponse_Builder data(byte[] data) {
            object.data = data;
            return this;
        }
        public Login_Server_LoginPluginResponse build() {
             return object;
        }

    }
    public static Login_Server_LoginPluginResponse_Builder builder() {
        return new Login_Server_LoginPluginResponse_Builder();
    }
}