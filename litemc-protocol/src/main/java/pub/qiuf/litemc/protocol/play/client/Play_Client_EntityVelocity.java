package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x46)
public class Play_Client_EntityVelocity extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x46;
    @MCType("VarInt")
    private int entityId;
    /** Velocity on the X axis */
    @MCType("Short")
    private short velocityX;
    /** Velocity on the Y axis */
    @MCType("Short")
    private short velocityY;
    /** Velocity on the Z axis */
    @MCType("Short")
    private short velocityZ;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        packet.write(ByteUtils.encodeVarInt(entityId));
        // Velocity on the X axis
        packet.write(ByteUtils.encodeShort(velocityX));
        // Velocity on the Y axis
        packet.write(ByteUtils.encodeShort(velocityY));
        // Velocity on the Z axis
        packet.write(ByteUtils.encodeShort(velocityZ));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        entityId = StreamUtils.readVarInt(in);
        // Velocity on the X axis
        velocityX = StreamUtils.readShort(in);
        // Velocity on the Y axis
        velocityY = StreamUtils.readShort(in);
        // Velocity on the Z axis
        velocityZ = StreamUtils.readShort(in);
    }
    public static class Play_Client_EntityVelocity_Builder {
        private Play_Client_EntityVelocity object = new Play_Client_EntityVelocity();
        /** Packet ID */
        public Play_Client_EntityVelocity_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        public Play_Client_EntityVelocity_Builder entityId(int entityId) {
            object.entityId = entityId;
            return this;
        }
        /** Velocity on the X axis */
        public Play_Client_EntityVelocity_Builder velocityX(short velocityX) {
            object.velocityX = velocityX;
            return this;
        }
        /** Velocity on the Y axis */
        public Play_Client_EntityVelocity_Builder velocityY(short velocityY) {
            object.velocityY = velocityY;
            return this;
        }
        /** Velocity on the Z axis */
        public Play_Client_EntityVelocity_Builder velocityZ(short velocityZ) {
            object.velocityZ = velocityZ;
            return this;
        }
        public Play_Client_EntityVelocity build() {
             return object;
        }

    }
    public static Play_Client_EntityVelocity_Builder builder() {
        return new Play_Client_EntityVelocity_Builder();
    }
}