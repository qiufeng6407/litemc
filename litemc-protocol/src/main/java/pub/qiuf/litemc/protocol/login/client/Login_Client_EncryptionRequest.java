package pub.qiuf.litemc.protocol.login.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x01)
public class Login_Client_EncryptionRequest extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x01;
    /** Appears to be empty */
    @MCType("String")
    private String serverId;
    /** Length of Public Key */
    @MCType("VarInt")
    private int publicKeyLength;
    @MCType("Byte")
    private byte[] publicKey;
    /** Length of Verify Token. Always 4 for Notchian servers. */
    @MCType("VarInt")
    private int verifyTokenLength;
    /** A sequence of random bytes generated by the server */
    @MCType("Byte")
    private byte[] verifyToken;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Appears to be empty
        packet.write(ByteUtils.encodeString(serverId));
        // Length of Public Key
        packet.write(ByteUtils.encodeVarInt(publicKeyLength));
        packet.write(publicKey);
        // Length of Verify Token. Always 4 for Notchian servers.
        packet.write(ByteUtils.encodeVarInt(verifyTokenLength));
        // A sequence of random bytes generated by the server
        packet.write(verifyToken);
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Appears to be empty
        serverId = StreamUtils.readString(in);
        // Length of Public Key
        publicKeyLength = StreamUtils.readVarInt(in);
        // TODO decode publicKey
        // Length of Verify Token. Always 4 for Notchian servers.
        verifyTokenLength = StreamUtils.readVarInt(in);
        // A sequence of random bytes generated by the server
        // TODO decode verifyToken
    }
    public static class Login_Client_EncryptionRequest_Builder {
        private Login_Client_EncryptionRequest object = new Login_Client_EncryptionRequest();
        /** Packet ID */
        public Login_Client_EncryptionRequest_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Appears to be empty */
        public Login_Client_EncryptionRequest_Builder serverId(String serverId) {
            object.serverId = serverId;
            return this;
        }
        /** Length of Public Key */
        public Login_Client_EncryptionRequest_Builder publicKeyLength(int publicKeyLength) {
            object.publicKeyLength = publicKeyLength;
            return this;
        }
        public Login_Client_EncryptionRequest_Builder publicKey(byte[] publicKey) {
            object.publicKey = publicKey;
            return this;
        }
        /** Length of Verify Token. Always 4 for Notchian servers. */
        public Login_Client_EncryptionRequest_Builder verifyTokenLength(int verifyTokenLength) {
            object.verifyTokenLength = verifyTokenLength;
            return this;
        }
        /** A sequence of random bytes generated by the server */
        public Login_Client_EncryptionRequest_Builder verifyToken(byte[] verifyToken) {
            object.verifyToken = verifyToken;
            return this;
        }
        public Login_Client_EncryptionRequest build() {
             return object;
        }

    }
    public static Login_Client_EncryptionRequest_Builder builder() {
        return new Login_Client_EncryptionRequest_Builder();
    }
}