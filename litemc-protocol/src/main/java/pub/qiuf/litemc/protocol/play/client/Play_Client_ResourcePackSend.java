package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x3A)
public class Play_Client_ResourcePackSend extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x3A;
    /** The URL to the resource pack. */
    @MCType("String")
    private String url;
    /** A 40 character hexadecimal and lowercase SHA-1 hash of the resource pack file. (must be lower case in order to work) If it's not a 40 character hexadecimal string, the client will not use it for hash verification and likely waste bandwidth — but it will still treat it as a unique id */
    @MCType("String")
    private String hash;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // The URL to the resource pack.
        packet.write(ByteUtils.encodeString(url));
        // A 40 character hexadecimal and lowercase SHA-1 hash of the resource pack file. (must be lower case in order to work) If it's not a 40 character hexadecimal string, the client will not use it for hash verification and likely waste bandwidth — but it will still treat it as a unique id
        packet.write(ByteUtils.encodeString(hash));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // The URL to the resource pack.
        url = StreamUtils.readString(in);
        // A 40 character hexadecimal and lowercase SHA-1 hash of the resource pack file. (must be lower case in order to work) If it's not a 40 character hexadecimal string, the client will not use it for hash verification and likely waste bandwidth — but it will still treat it as a unique id
        hash = StreamUtils.readString(in);
    }
    public static class Play_Client_ResourcePackSend_Builder {
        private Play_Client_ResourcePackSend object = new Play_Client_ResourcePackSend();
        /** Packet ID */
        public Play_Client_ResourcePackSend_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** The URL to the resource pack. */
        public Play_Client_ResourcePackSend_Builder url(String url) {
            object.url = url;
            return this;
        }
        /** A 40 character hexadecimal and lowercase SHA-1 hash of the resource pack file. (must be lower case in order to work) If it's not a 40 character hexadecimal string, the client will not use it for hash verification and likely waste bandwidth — but it will still treat it as a unique id */
        public Play_Client_ResourcePackSend_Builder hash(String hash) {
            object.hash = hash;
            return this;
        }
        public Play_Client_ResourcePackSend build() {
             return object;
        }

    }
    public static Play_Client_ResourcePackSend_Builder builder() {
        return new Play_Client_ResourcePackSend_Builder();
    }
}