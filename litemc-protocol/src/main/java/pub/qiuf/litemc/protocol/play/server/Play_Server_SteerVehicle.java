package pub.qiuf.litemc.protocol.play.server;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
public class Play_Server_SteerVehicle extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x1C;
    /** Positive to the left of the player */
    @MCType("Float")
    private float sideways;
    /** Positive forward */
    @MCType("Float")
    private float forward;
    /** Bit mask. 0x1: jump, 0x2: unmount */
    @MCType("UnsignedByte")
    private int flags;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Positive to the left of the player
        packet.write(ByteUtils.encodeFloat(sideways));
        // Positive forward
        packet.write(ByteUtils.encodeFloat(forward));
        // Bit mask. 0x1: jump, 0x2: unmount
        packet.write(ByteUtils.encodeUnsignedByte(flags));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Positive to the left of the player
        sideways = StreamUtils.readFloat(in);
        // Positive forward
        forward = StreamUtils.readFloat(in);
        // Bit mask. 0x1: jump, 0x2: unmount
        flags = StreamUtils.readUnsignedByte(in);
    }
    public static class Play_Server_SteerVehicle_Builder {
        private Play_Server_SteerVehicle object = new Play_Server_SteerVehicle();
        /** Packet ID */
        public Play_Server_SteerVehicle_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Positive to the left of the player */
        public Play_Server_SteerVehicle_Builder sideways(float sideways) {
            object.sideways = sideways;
            return this;
        }
        /** Positive forward */
        public Play_Server_SteerVehicle_Builder forward(float forward) {
            object.forward = forward;
            return this;
        }
        /** Bit mask. 0x1: jump, 0x2: unmount */
        public Play_Server_SteerVehicle_Builder flags(int flags) {
            object.flags = flags;
            return this;
        }
        public Play_Server_SteerVehicle build() {
             return object;
        }

    }
    public static Play_Server_SteerVehicle_Builder builder() {
        return new Play_Server_SteerVehicle_Builder();
    }
}