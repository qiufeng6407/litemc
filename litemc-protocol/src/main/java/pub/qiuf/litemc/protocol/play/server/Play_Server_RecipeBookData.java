package pub.qiuf.litemc.protocol.play.server;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
public class Play_Server_RecipeBookData extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x1D;
    /** Determines the format of the rest of the packet */
    @MCType("VarInt")
    private int type;
    /** A recipe ID */
    @MCType("Identifier")
    private String recipeId;
    @MCType("Play_Server_RecipeBookData_RecipeBookStates")
    private Play_Server_RecipeBookData_RecipeBookStates recipeBookStates;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // Determines the format of the rest of the packet
        packet.write(ByteUtils.encodeVarInt(type));
        // A recipe ID
        packet.write(ByteUtils.encodeIdentifier(recipeId));
        packet.write(recipeBookStates.encode());
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // Determines the format of the rest of the packet
        type = StreamUtils.readVarInt(in);
        // A recipe ID
        recipeId = StreamUtils.readIdentifier(in);
        recipeBookStates = new Play_Server_RecipeBookData_RecipeBookStates();
        recipeBookStates.decode(in);
    }
    @Data
    public static class Play_Server_RecipeBookData_RecipeBookStates extends Packet {
        /** Whether the player has the crafting recipe book currently opened/active. */
        @MCType("Boolean")
        private boolean craftingRecipeBookOpen;
        /** Whether the player has the crafting recipe book filter option currently active. */
        @MCType("Boolean")
        private boolean craftingRecipeFilterActive;
        /** Whether the player has the smelting recipe book currently opened/active. */
        @MCType("Boolean")
        private boolean smeltingRecipeBookOpen;
        /** Whether the player has the smelting recipe book filter option currently active. */
        @MCType("Boolean")
        private boolean smeltingRecipeFilterActive;
        /** May be swapped with smoking recipe book. Also, the notchian client appears to use the same value for both of those books currently. */
        @MCType("Boolean")
        private boolean blastingRecipeBookOpen;
        /** May be swapped with smoking recipe book. Also, the notchian client appears to use the same value for both of those books currently. */
        @MCType("Boolean")
        private boolean blastingRecipeFilterActive;
        @MCType("Boolean")
        private boolean smokingRecipeBookOpen;
        @MCType("Boolean")
        private boolean smokingRecipeFilterActive;

        @Override
        public byte[] encode() throws Exception {
            ByteArrayDataOutput packet = ByteStreams.newDataOutput();
            // Whether the player has the crafting recipe book currently opened/active.
            packet.write(ByteUtils.encodeBoolean(craftingRecipeBookOpen));
            // Whether the player has the crafting recipe book filter option currently active.
            packet.write(ByteUtils.encodeBoolean(craftingRecipeFilterActive));
            // Whether the player has the smelting recipe book currently opened/active.
            packet.write(ByteUtils.encodeBoolean(smeltingRecipeBookOpen));
            // Whether the player has the smelting recipe book filter option currently active.
            packet.write(ByteUtils.encodeBoolean(smeltingRecipeFilterActive));
            // May be swapped with smoking recipe book. Also, the notchian client appears to use the same value for both of those books currently.
            packet.write(ByteUtils.encodeBoolean(blastingRecipeBookOpen));
            // May be swapped with smoking recipe book. Also, the notchian client appears to use the same value for both of those books currently.
            packet.write(ByteUtils.encodeBoolean(blastingRecipeFilterActive));
            packet.write(ByteUtils.encodeBoolean(smokingRecipeBookOpen));
            packet.write(ByteUtils.encodeBoolean(smokingRecipeFilterActive));
            return packet.toByteArray();
        }
        @Override
        public void decode(ByteArrayDataInput in) throws Exception {
            // Whether the player has the crafting recipe book currently opened/active.
            craftingRecipeBookOpen = StreamUtils.readBoolean(in);
            // Whether the player has the crafting recipe book filter option currently active.
            craftingRecipeFilterActive = StreamUtils.readBoolean(in);
            // Whether the player has the smelting recipe book currently opened/active.
            smeltingRecipeBookOpen = StreamUtils.readBoolean(in);
            // Whether the player has the smelting recipe book filter option currently active.
            smeltingRecipeFilterActive = StreamUtils.readBoolean(in);
            // May be swapped with smoking recipe book. Also, the notchian client appears to use the same value for both of those books currently.
            blastingRecipeBookOpen = StreamUtils.readBoolean(in);
            // May be swapped with smoking recipe book. Also, the notchian client appears to use the same value for both of those books currently.
            blastingRecipeFilterActive = StreamUtils.readBoolean(in);
            smokingRecipeBookOpen = StreamUtils.readBoolean(in);
            smokingRecipeFilterActive = StreamUtils.readBoolean(in);
        }
    }
    @FunctionalInterface
    public interface Play_Server_RecipeBookData_RecipeBookStates_Provider {
        Play_Server_RecipeBookData_RecipeBookStates provide();
    }
    public static Play_Server_RecipeBookData_RecipeBookStates_Builder recipeBookStatesBuilder() {
        return new Play_Server_RecipeBookData_RecipeBookStates_Builder();
    }
    public static class Play_Server_RecipeBookData_RecipeBookStates_Builder {
        private Play_Server_RecipeBookData_RecipeBookStates object = new Play_Server_RecipeBookData_RecipeBookStates();
        /** Whether the player has the crafting recipe book currently opened/active. */
        public Play_Server_RecipeBookData_RecipeBookStates_Builder craftingRecipeBookOpen(boolean craftingRecipeBookOpen) {
            object.craftingRecipeBookOpen = craftingRecipeBookOpen;
            return this;
        }
        /** Whether the player has the crafting recipe book filter option currently active. */
        public Play_Server_RecipeBookData_RecipeBookStates_Builder craftingRecipeFilterActive(boolean craftingRecipeFilterActive) {
            object.craftingRecipeFilterActive = craftingRecipeFilterActive;
            return this;
        }
        /** Whether the player has the smelting recipe book currently opened/active. */
        public Play_Server_RecipeBookData_RecipeBookStates_Builder smeltingRecipeBookOpen(boolean smeltingRecipeBookOpen) {
            object.smeltingRecipeBookOpen = smeltingRecipeBookOpen;
            return this;
        }
        /** Whether the player has the smelting recipe book filter option currently active. */
        public Play_Server_RecipeBookData_RecipeBookStates_Builder smeltingRecipeFilterActive(boolean smeltingRecipeFilterActive) {
            object.smeltingRecipeFilterActive = smeltingRecipeFilterActive;
            return this;
        }
        /** May be swapped with smoking recipe book. Also, the notchian client appears to use the same value for both of those books currently. */
        public Play_Server_RecipeBookData_RecipeBookStates_Builder blastingRecipeBookOpen(boolean blastingRecipeBookOpen) {
            object.blastingRecipeBookOpen = blastingRecipeBookOpen;
            return this;
        }
        /** May be swapped with smoking recipe book. Also, the notchian client appears to use the same value for both of those books currently. */
        public Play_Server_RecipeBookData_RecipeBookStates_Builder blastingRecipeFilterActive(boolean blastingRecipeFilterActive) {
            object.blastingRecipeFilterActive = blastingRecipeFilterActive;
            return this;
        }
        public Play_Server_RecipeBookData_RecipeBookStates_Builder smokingRecipeBookOpen(boolean smokingRecipeBookOpen) {
            object.smokingRecipeBookOpen = smokingRecipeBookOpen;
            return this;
        }
        public Play_Server_RecipeBookData_RecipeBookStates_Builder smokingRecipeFilterActive(boolean smokingRecipeFilterActive) {
            object.smokingRecipeFilterActive = smokingRecipeFilterActive;
            return this;
        }
        public Play_Server_RecipeBookData_RecipeBookStates build() {
             return object;
        }

    }
    public static class Play_Server_RecipeBookData_Builder {
        private Play_Server_RecipeBookData object = new Play_Server_RecipeBookData();
        /** Packet ID */
        public Play_Server_RecipeBookData_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** Determines the format of the rest of the packet */
        public Play_Server_RecipeBookData_Builder type(int type) {
            object.type = type;
            return this;
        }
        /** A recipe ID */
        public Play_Server_RecipeBookData_Builder recipeId(String recipeId) {
            object.recipeId = recipeId;
            return this;
        }
        public Play_Server_RecipeBookData_Builder recipeBookStates(Play_Server_RecipeBookData_RecipeBookStates_Provider provider) {
            object.recipeBookStates = provider.provide();
            return this;
        }
        public Play_Server_RecipeBookData build() {
             return object;
        }

    }
    public static Play_Server_RecipeBookData_Builder builder() {
        return new Play_Server_RecipeBookData_Builder();
    }
}