package pub.qiuf.litemc.protocol.play.client;

import pub.qiuf.litemc.common.bean.datatype.Packet;
import com.google.common.io.ByteArrayDataInput;
import com.google.common.io.ByteStreams;
import pub.qiuf.litemc.common.util.ByteUtils;
import pub.qiuf.litemc.common.annotation.MCType;
import com.google.common.io.ByteArrayDataOutput;
import pub.qiuf.litemc.common.annotation.ServerPacket;
import lombok.Data;
import pub.qiuf.litemc.common.util.StreamUtils;

/**
 * Code is generated by <code>pub.qiuf.litemc.generator.ProtocolGenerator</code>, Please don't modify.<br>
 * See more detail from <a>https://wiki.vg/Protocol</a><br>
 */
@Data
@ServerPacket(0x4F)
public class Play_Client_TimeUpdate extends Packet {
    /** Packet ID */
    @MCType("VarInt")
    private int packetId = 0x4F;
    /** In ticks; not changed by server commands */
    @MCType("Long")
    private long worldAge;
    /** The world (or region) time, in ticks. If negative the sun will stop moving at the Math.abs of the time */
    @MCType("Long")
    private long timeOfDay;

    @Override
    public byte[] encode() throws Exception {
        ByteArrayDataOutput packet = ByteStreams.newDataOutput();
        // Packet ID
        packet.write(ByteUtils.encodeVarInt(packetId));
        // In ticks; not changed by server commands
        packet.write(ByteUtils.encodeLong(worldAge));
        // The world (or region) time, in ticks. If negative the sun will stop moving at the Math.abs of the time
        packet.write(ByteUtils.encodeLong(timeOfDay));
        return packet.toByteArray();
    }
    @Override
    public void decode(ByteArrayDataInput in) throws Exception {
        // Packet ID
        packetId = StreamUtils.readVarInt(in);
        // In ticks; not changed by server commands
        worldAge = StreamUtils.readLong(in);
        // The world (or region) time, in ticks. If negative the sun will stop moving at the Math.abs of the time
        timeOfDay = StreamUtils.readLong(in);
    }
    public static class Play_Client_TimeUpdate_Builder {
        private Play_Client_TimeUpdate object = new Play_Client_TimeUpdate();
        /** Packet ID */
        public Play_Client_TimeUpdate_Builder packetId(int packetId) {
            object.packetId = packetId;
            return this;
        }
        /** In ticks; not changed by server commands */
        public Play_Client_TimeUpdate_Builder worldAge(long worldAge) {
            object.worldAge = worldAge;
            return this;
        }
        /** The world (or region) time, in ticks. If negative the sun will stop moving at the Math.abs of the time */
        public Play_Client_TimeUpdate_Builder timeOfDay(long timeOfDay) {
            object.timeOfDay = timeOfDay;
            return this;
        }
        public Play_Client_TimeUpdate build() {
             return object;
        }

    }
    public static Play_Client_TimeUpdate_Builder builder() {
        return new Play_Client_TimeUpdate_Builder();
    }
}